# streamlit ui

import streamlit as st
import datetime
import requests
import sys
from dotenv import load_dotenv
import os
load_dotenv()

# backend endpoint
base_url=os.getenv("BACKEND_ENDPOINT")


st.set_page_config(
    page_title="AI Travel Planner",
    page_icon="🌎",
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title("🌎 AI Travel Planning Agent")

# chat history
if "messages" not in st.session_state:
    st.session_state.messages=[]
    
# display the chat history

st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# render the past messages
for msg in st.session_state.messages:
    if msg["role"]=="user":
        st.chat_message("user").write(msg['content'])
    elif msg['role']=="assistant":
        st.chat_message("assistant").markdown(msg['content'])

# get the input from the chat

with st.form(key="query_form",clear_on_submit=True):
    user_input=st.text_input("User Input",placeholder="e.g. Plan a trip to Thailand for 5 days between these dates")
    submit_button=st.form_submit_button("Send")
    

if submit_button and user_input.strip():
    # store the user message or query
    st.session_state.messages.append({
        "role":"user",
        "content":user_input
    })
    
    try:
        # show user the output
        with st.spinner("Bot is thinking......"):
            payload={"query":user_input}
            response=requests.post(f"{base_url}/query",json=payload)
        
        if response.status_code==200:
            answer=response.json().get("answer","No answer returned")
            
            markdown_content = f"""
            
            # 🌍 AI Travel Plan

            # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
            # **Created by:** Dhruv's Travel Agent

            ---

            {answer}

            ---

            *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
            """
            
            st.chat_message("assistant").markdown(markdown_content)
            
            # save assitants response
            st.session_state.messages.append({
                "role":"assistant",
                "content":markdown_content
            })
            
        else:
            st.error("Bot failed to respond... "+response.text)
        
        
    except Exception as e:
        raise f"The response failed due to {e}"
    

