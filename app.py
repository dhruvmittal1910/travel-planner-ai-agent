# # streamlit ui

# import streamlit as st
# import datetime
# import requests
# import sys
# from dotenv import load_dotenv
# import os
# load_dotenv()

# # backend endpoint
# base_url=os.getenv("BACKEND_ENDPOINT")


# st.set_page_config(
#     page_title="AI Travel Planner",
#     page_icon="🌎",
#     layout="centered",
#     initial_sidebar_state="expanded"
# )

# st.title("🌎 AI Travel Planning Agent")

# # chat history
# if "messages" not in st.session_state:
#     st.session_state.messages=[]
    
# # display the chat history

# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# # render the past messages
# for msg in st.session_state.messages:
#     if msg["role"]=="user":
#         st.chat_message("user").write(msg['content'])
#     elif msg['role']=="assistant":
#         st.chat_message("assistant").markdown(msg['content'])

# # get the input from the chat

# with st.form(key="query_form",clear_on_submit=True):
#     user_input=st.text_input("User Input",placeholder="e.g. Plan a trip to Thailand for 5 days")
#     submit_button=st.form_submit_button("Send")
    

# if submit_button and user_input.strip():
#     # store the user message or query
#     st.session_state.messages.append({
#         "role":"user",
#         "content":user_input
#     })
    
#     try:
#         # show user the output
#         with st.spinner("Bot is thinking......"):
#             payload={"query":user_input}
#             response=requests.post(f"{base_url}/query",json=payload)
        
#         if response.status_code==200:
#             answer=response.json().get("answer","No answer returned")
            
#             markdown_content = f"""
            
#             # 🌍 AI Travel Plan

#             # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             # **Created by:** Dhruv's Travel Agent

#             ---

#             {answer}

#             ---

#             *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
#             """
            
#             st.chat_message("assistant").markdown(markdown_content)
            
#             # save assitants response
#             st.session_state.messages.append({
#                 "role":"assistant",
#                 "content":markdown_content
#             })
            
#         else:
#             st.error("Bot failed to respond... "+response.text)
        
        
#     except Exception as e:
#         raise f"The response failed due to {e}"
    



# 🌎 AI Travel Planner - Beautiful Streamlit UI
import streamlit as st
import datetime
import requests
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
BASE_URL = os.getenv("BACKEND_ENDPOINT", "http://localhost:8000")

# Page configuration
st.set_page_config(
    page_title="🌍 AI Travel Planner Agent",
    page_icon="🌎",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Custom CSS for a Modern Look ---
st.markdown("""
    <style>
    body {
        background-color: #f4f7fb;
    }
    .main {
        background-color: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin-top: 1rem;
    }
    .stTextInput>div>div>input {
        border-radius: 10px;
        border: 1px solid #ccc;
        padding: 0.75rem;
    }
    .chat-bubble {
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 15px;
        line-height: 1.5;
        width: fit-content;
        max-width: 80%;
    }
    .user-bubble {
        background-color: #DCF8C6;
        align-self: flex-end;
    }
    .assistant-bubble {
        background-color: #E8E8E8;
        align-self: flex-start;
    }
    .timestamp {
        font-size: 0.8em;
        color: gray;
        text-align: right;
        margin-top: 0.25rem;
    }
    .stButton button {
        border-radius: 10px;
        background-color: #0078ff;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: 600;
    }
    .stButton button:hover {
        background-color: #005fcc;
        color: #fff;
    }
    </style>
""", unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.markdown("## 🌎 AI Travel Planning Agent")
    st.write("Your personal AI travel planner that builds detailed, day-by-day itineraries using real-time data.")
    st.markdown("---")
    st.write("💡 **Tips:**")
    st.markdown("- Be specific (e.g. *“Plan a 6-day trip to Bali for adventure activities”*)")
    st.markdown("- You’ll get **two plans**: one classic & one offbeat")
    st.markdown("---")
    if st.button("🧹 Clear Chat History"):
        st.session_state.messages = []
        st.experimental_rerun()
    st.markdown("---")
    st.markdown("👨‍💻 **Created by:** Dhruv Mittal")
    st.markdown("📅 Version: 1.0")

# App title
st.title("🧳 Plan Your Dream Trip with AI")

st.caption("Let’s plan your next adventure — detailed itineraries, costs, weather, and more!")

# --- Initialize chat history ---
if "messages" not in st.session_state:
    st.session_state.messages = []

# --- Display previous messages ---
chat_container = st.container()
with chat_container:
    for msg in st.session_state.messages:
        bubble_class = "user-bubble" if msg["role"] == "user" else "assistant-bubble"
        emoji = "🧑‍💼" if msg["role"] == "assistant" else "✈️"
        with st.chat_message(msg["role"]):
            st.markdown(
                f'<div class="chat-bubble {bubble_class}">{emoji} {msg["content"]}</div>'
                f'<div class="timestamp">{msg["time"]}</div>',
                unsafe_allow_html=True,
            )

# --- User input section ---
st.markdown("### 💬 Chat with the AI Travel Agent")

with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("Your Message", placeholder="e.g. Plan a 7-day trip to Switzerland for skiing ❄️")
    submitted = st.form_submit_button("Send")

if submitted and user_input.strip():
    # Save user input
    st.session_state.messages.append({
        "role": "user",
        "content": user_input,
        "time": datetime.datetime.now().strftime("%H:%M"),
    })

    with st.spinner("🌍 Thinking and planning your trip..."):
        try:
            payload = {"query": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload, timeout=120)

            if response.status_code == 200:
                answer = response.json().get("answer", "No answer returned.")

                markdown_response = f"""
                ## 🗺️ AI-Generated Travel Plan  
                **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}  
                **Created by:** Dhruv's Travel Agent  

                ---
                {answer}
                ---
                *Please verify all details, especially pricing, timings, and travel rules before booking.*
                """

                # Show assistant message
                with st.chat_message("assistant"):
                    st.markdown(
                        f'<div class="chat-bubble assistant-bubble">🧑‍💼 {markdown_response}</div>'
                        f'<div class="timestamp">{datetime.datetime.now().strftime("%H:%M")}</div>',
                        unsafe_allow_html=True,
                    )

                # Save assistant reply
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": markdown_response,
                    "time": datetime.datetime.now().strftime("%H:%M"),
                })

            else:
                st.error("❌ Bot failed to respond: " + response.text)

        except Exception as e:
            st.error(f"⚠️ The response failed due to {e}")
